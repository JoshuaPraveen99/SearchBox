first try : 

package com.search;

import java.io.Serializable;
import java.util.*;
import java.util.stream.Collectors;

import javax.annotation.PostConstruct;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

public class SelfServiceSettingsBBean implements Serializable {

    private static final long serialVersionUID = 1L;

    /* ===== Event + Pickup dropdown lists ===== */
    private List<String> eventCodesList;
    private List<String> pickupTypeList;

    private Map<String, Boolean> selectedEventCodesMap;
    private Map<String, Boolean> selectedPickupTypeMap;

    /* ===== NEW: Hidden strings for form submission ===== */
    private String selectedEventCodesString;
    private String selectedPickupTypesString;

    /* ===== Notification messages (chips + suggestions) ===== */
    private List<String> searchNotificationMessages;
    private Map<String, Boolean> selectedNotificationMap;

    /* ⚠️ chipQuery = text user is currently typing in chip editor */
    private String chipQuery;
    public String getChipQuery() { return chipQuery; }
    public void setChipQuery(String chipQuery) { this.chipQuery = chipQuery; }

    /* ===== NEW: Property to hold filtered JSON for Ajax response ===== */
    private String notificationSuggestionsJson;
    
    public String getNotificationSuggestionsJson() {
        return notificationSuggestionsJson;
    }

    /* Summary shown after submit */
    private String selectedSummary;
    public String getSelectedSummary() { return selectedSummary; }

    /* Tooltip map for Event Codes */
    private Map<String, String> eventCodeTooltips;
    public Map<String, String> getEventCodeTooltips() { return eventCodeTooltips; }


    @PostConstruct
    public void init() {

        /* === Dummy data for your UI === */
        eventCodesList = new ArrayList<>(Arrays.asList(
                "EVT001 - Registration",
                "EVT002 - Payment",
                "EVT003 - Cancellation",
                "EVT004 - Activation",
                "EVT005 - Suspension",
                "EVT006 - Reactivation",
                "EVT007 - Modification",
                "EVT008 - Upgrade",
                "EVT009 - Downgrade",
                "EVT010 - Transfer",
                "EVT011 - Renewal",
                "EVT012 - Expiration",
                "EVT013 - Notification",
                "EVT014 - Alert",
                "EVT015 - Warning",
                "EVT016 - Error",
                "EVT017 - Success",
                "EVT018 - Pending",
                "EVT019 - Approved",
                "EVT020 - Rejected",
                "EVT021 - Processing",
                "EVT022 - Completed",
                "EVT023 - Failed",
                "EVT024 - Timeout",
                "EVT025 - Retry",
                "EVT026 - Confirmation",
                "EVT027 - Verification",
                "EVT028 - Authentication",
                "EVT029 - Authorization",
                "EVT030 - Logout"
            ));
            
            // 30 Pickup Types
            pickupTypeList = new ArrayList<>(Arrays.asList(
                "Home Delivery",
                "Store Pickup",
                "Mail Order",
                "Express Delivery",
                "Same Day Delivery",
                "Next Day Delivery",
                "Standard Shipping",
                "Priority Shipping",
                "Overnight Shipping",
                "International Shipping",
                "Curbside Pickup",
                "Drive-Through Pickup",
                "Locker Pickup",
                "Counter Pickup",
                "Pharmacy Pickup",
                "In-Store Collection",
                "Click and Collect",
                "Ship to Store",
                "Local Delivery",
                "Regional Delivery",
                "National Delivery",
                "Courier Service",
                "Postal Service",
                "Parcel Locker",
                "Drop Box",
                "Mobile Delivery",
                "Scheduled Delivery",
                "Weekend Delivery",
                "Evening Delivery",
                "Morning Delivery"
            ));
            
            // 30 Notification Messages with special characters for testing
            searchNotificationMessages = new ArrayList<>(Arrays.asList(
                "Prescription ready for pickup",
                "Medicine out of stock",
                "Refill reminder",
                "Order shipped",
                "Discount available",
                "New prescription received",
                "Insurance claim approved",
                "Payment pending",
                "Delivery scheduled",
                "Package delayed",
                "Appointment reminder",
                "Lab results ready",
                "Vaccination due",
                "Medication interaction alert",
                "Dosage change notification",
                "Generic alternative available",
                "Prior authorization required",
                "Copay amount changed",
                "Pharmacy location changed",
                "Transfer request received",
                "Prescription expired",
                "Doctor consultation required",
                "Side effects reported",
                "Allergic reaction warning",
                "Temperature sensitive item",
                "Controlled substance notice",
                "Refill limit reached",
                "Insurance verification needed",
                "Signature required for delivery",
                "Special handling instructions"
            ));
            
        selectedEventCodesMap = new LinkedHashMap<>();
        for (String e : eventCodesList) {
            selectedEventCodesMap.put(e, Boolean.FALSE);
        }

        selectedPickupTypeMap = new LinkedHashMap<>();
        for (String t : pickupTypeList) {
            selectedPickupTypeMap.put(t, Boolean.FALSE);
        }

        selectedNotificationMap = new LinkedHashMap<>();
        for (String m : searchNotificationMessages) {
            selectedNotificationMap.put(m, Boolean.FALSE);
        }

        eventCodeTooltips = new LinkedHashMap<>();
        eventCodeTooltips.put("EVT001 - Registration", "Employee Created");
        eventCodeTooltips.put("EVT002 - Payment", "Employee Updated");
        eventCodeTooltips.put("EVT003 - Cancellation", "Employee Deleted");

        chipQuery = "";
        selectedEventCodesString = "";
        selectedPickupTypesString = "";
        notificationSuggestionsJson = "[]";
    }


    /* ====== Getters for UI lists ====== */
    public List<String> getEventCodesList() { return eventCodesList; }
    public List<String> getPickupTypeList() { return pickupTypeList; }
    public Map<String, Boolean> getSelectedEventCodesMap() { return selectedEventCodesMap; }
    public Map<String, Boolean> getSelectedPickupTypeMap() { return selectedPickupTypeMap; }
    public Map<String, Boolean> getSelectedNotificationMap() { return selectedNotificationMap; }


    /* ===== NEW: Getters/Setters for hidden form fields ===== */
    public String getSelectedEventCodesString() {
        return selectedEventCodesString;
    }

    public void setSelectedEventCodesString(String selectedEventCodesString) {
        this.selectedEventCodesString = selectedEventCodesString;
        
        // Parse and update the map
        for (Map.Entry<String, Boolean> entry : selectedEventCodesMap.entrySet()) {
            selectedEventCodesMap.put(entry.getKey(), Boolean.FALSE);
        }
        
        if (selectedEventCodesString != null && !selectedEventCodesString.trim().isEmpty()) {
            String[] codes = selectedEventCodesString.split(",");
            for (String code : codes) {
                String trimmed = code.trim();
                if (!trimmed.isEmpty() && selectedEventCodesMap.containsKey(trimmed)) {
                    selectedEventCodesMap.put(trimmed, Boolean.TRUE);
                }
            }
        }
    }

    public String getSelectedPickupTypesString() {
        return selectedPickupTypesString;
    }

    public void setSelectedPickupTypesString(String selectedPickupTypesString) {
        this.selectedPickupTypesString = selectedPickupTypesString;
        
        // Parse and update the map
        for (Map.Entry<String, Boolean> entry : selectedPickupTypeMap.entrySet()) {
            selectedPickupTypeMap.put(entry.getKey(), Boolean.FALSE);
        }
        
        if (selectedPickupTypesString != null && !selectedPickupTypesString.trim().isEmpty()) {
            String[] types = selectedPickupTypesString.split(",");
            for (String type : types) {
                String trimmed = type.trim();
                if (!trimmed.isEmpty() && selectedPickupTypeMap.containsKey(trimmed)) {
                    selectedPickupTypeMap.put(trimmed, Boolean.TRUE);
                }
            }
        }
    }


    /* ✅ This list drives chip rendering */
    public List<String> getSelectedNotificationList() {
        List<String> result = new ArrayList<>();
        for (Map.Entry<String, Boolean> entry : selectedNotificationMap.entrySet()) {
            if (entry.getValue()) {
                result.add(entry.getKey());
            }
        }
        return result;
    }


    /* ✅ Filtering suggestions – RichFaces passes only current token because tokens="," */
    public List<String> filterNotificationMessages(Object query) {
        String q = (query == null) ? "" : query.toString().trim().toLowerCase();
        if (q.isEmpty()) {
            return new ArrayList<>(searchNotificationMessages);
        }

        List<String> result = new ArrayList<>();
        for (String m : searchNotificationMessages) {
            if (m.toLowerCase().contains(q)) {
                result.add(m);
            }
        }
        return result;
    }


    /* ✅ Called by jsFunction rfToggleNotif() - KEPT for notifications only */
    private String toggleLabel;
    private boolean toggleChecked;

    public String getToggleLabel() { return toggleLabel; }
    public void setToggleLabel(String toggleLabel) { this.toggleLabel = toggleLabel; }

    public boolean isToggleChecked() { return toggleChecked; }
    public void setToggleChecked(boolean toggleChecked) { this.toggleChecked = toggleChecked; }

    public String toggleNotification() {
        if (toggleLabel != null) {
            selectedNotificationMap.put(toggleLabel, toggleChecked);
        }
        return null;
    }


    /* ✅ Final summary - now reads from properly synced maps */
    public String printSelections() {

        List<String> eventsList = new ArrayList<>();
        for (Map.Entry<String, Boolean> entry : selectedEventCodesMap.entrySet()) {
            if (entry.getValue()) {
                eventsList.add(entry.getKey());
            }
        }
        String events = join(eventsList, ", ");

        List<String> pickupsList = new ArrayList<>();
        for (Map.Entry<String, Boolean> entry : selectedPickupTypeMap.entrySet()) {
            if (entry.getValue()) {
                pickupsList.add(entry.getKey());
            }
        }
        String pickups = join(pickupsList, ", ");

        List<String> notifsList = new ArrayList<>();
        for (Map.Entry<String, Boolean> entry : selectedNotificationMap.entrySet()) {
            if (entry.getValue()) {
                notifsList.add(entry.getKey());
            }
        }
        String notifs = join(notifsList, ", ");

        selectedSummary =
                "<b>Event Codes:</b> " + (events.isEmpty() ? "None" : escapeHtml(events)) + "<br/>" +
                "<b>Pickup Types:</b> " + (pickups.isEmpty() ? "None" : escapeHtml(pickups)) + "<br/>" +
                "<b>Notifications:</b> " + (notifs.isEmpty() ? "None" : escapeHtml(notifs));

        return null;
    }
    
    /**
     * ✅ FIXED: Ajax method that returns data via bean property
     * Reads from chipQuery property set by a4j:actionparam
     * Handles special characters properly
     */
    public void fetchNotificationSuggestions() {
        System.out.println("[INFO] ===== fetchNotificationSuggestions() START =====");

        try {
            // Read from the chipQuery property set by a4j:actionparam
            String q = (chipQuery == null) ? "" : chipQuery.trim().toLowerCase();
            System.out.println("[INFO] Query received from chipQuery: '" + q + "'");

            // Filter notification messages based on query
            List<String> filtered;
            if (q.isEmpty()) {
                filtered = new ArrayList<>(searchNotificationMessages);
                System.out.println("[INFO] Empty query — returning full list (" + filtered.size() + ")");
            } else {
                filtered = new ArrayList<>();
                for (String m : searchNotificationMessages) {
                    if (m.toLowerCase().contains(q)) {
                        filtered.add(m);
                    }
                }
                System.out.println("[INFO] Filtered list size: " + filtered.size());
            }

            // Build JSON string with proper escaping
            StringBuilder json = new StringBuilder("[");
            for (int i = 0; i < filtered.size(); i++) {
                if (i > 0) json.append(",");
                json.append("\"").append(escapeJson(filtered.get(i))).append("\"");
            }
            json.append("]");
            
            // Store in bean property
            notificationSuggestionsJson = json.toString();
            System.out.println("[INFO] JSON prepared (first 100 chars): " + 
                notificationSuggestionsJson.substring(0, Math.min(100, notificationSuggestionsJson.length())) + "...");

        } catch (Exception e) {
            System.err.println("[ERROR] Exception in fetchNotificationSuggestions: " + e.getMessage());
            e.printStackTrace(System.err);
            notificationSuggestionsJson = "[]";
        }
        
        System.out.println("[INFO] ===== fetchNotificationSuggestions() END =====");
    }

    /**
     * Escape special characters for JSON string
     * Handles: backslash, quote, newline, return, tab, backspace, form feed
     * Also handles Unicode control characters
     */
    private String escapeJson(String s) {
        if (s == null) return "";
        
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            switch (c) {
                case '\\':
                    sb.append("\\\\");
                    break;
                case '"':
                    sb.append("\\\"");
                    break;
                case '\n':
                    sb.append("\\n");
                    break;
                case '\r':
                    sb.append("\\r");
                    break;
                case '\t':
                    sb.append("\\t");
                    break;
                case '\b':
                    sb.append("\\b");
                    break;
                case '\f':
                    sb.append("\\f");
                    break;
                case '/':
                    sb.append("\\/");
                    break;
                default:
                    // Handle Unicode control characters (0x00 to 0x1F)
                    if (c < 0x20) {
                        sb.append(String.format("\\u%04x", (int) c));
                    } else {
                        sb.append(c);
                    }
                    break;
            }
        }
        return sb.toString();
    }
    
    /**
     * Escape special HTML characters
     */
    private String escapeHtml(String s) {
        if (s == null) return "";
        
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            switch (c) {
                case '<':
                    sb.append("&lt;");
                    break;
                case '>':
                    sb.append("&gt;");
                    break;
                case '&':
                    sb.append("&amp;");
                    break;
                case '"':
                    sb.append("&quot;");
                    break;
                case '\'':
                    sb.append("&#39;");
                    break;
                default:
                    sb.append(c);
                    break;
            }
        }
        return sb.toString();
    }
    
    /**
     * Join list elements with delimiter (Java 7 compatible)
     */
    private String join(List<String> list, String delimiter) {
        if (list == null || list.isEmpty()) return "";
        
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < list.size(); i++) {
            if (i > 0) sb.append(delimiter);
            sb.append(list.get(i));
        }
        return sb.toString();
    }
}





<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition template="/WEB-INF/templates/main.xhtml"
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://java.sun.com/jsf/facelets"
    xmlns:h="http://java.sun.com/jsf/html"
    xmlns:f="http://java.sun.com/jsf/core"
    xmlns:a4j="http://richfaces.org/a4j">

<ui:define name="title">Search Box Example</ui:define>

<ui:define name="head">
<style>
/* ===================== PAGE LAYOUT ===================== */
.form-section {
  margin: 20px;
  font-family: Arial, sans-serif;
}

.field-row {
  display: -webkit-box;      /* OLD - iOS 6-, Safari 3.1-6 */
  display: -moz-box;         /* OLD - Firefox 19- */
  display: -ms-flexbox;      /* TWEENER - IE 10 */
  display: -webkit-flex;     /* NEW - Chrome */
  display: flex;             /* NEW, Spec - Opera 12.1, Firefox 20+ */
  
  -webkit-box-align: start;
  -moz-box-align: start;
  -ms-flex-align: start;
  -webkit-align-items: flex-start;
  align-items: flex-start;
  
  gap: 20px;
  margin-bottom: 16px;
}

/* Fallback for browsers without gap support */
.field-row > * {
  margin-right: 20px;
}
.field-row > *:last-child {
  margin-right: 0;
}

.field-label {
  font-weight: bold;
  font-size: 12px;
  margin-bottom: 4px;
}

.field-col { 
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  
  -webkit-box-orient: vertical;
  -moz-box-orient: vertical;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  
  position: relative; 
}

/* ===================== CUSTOM DROPDOWNS ===================== */
.rich-dropdown {
  position: relative;
  width: 180px;
  font-size: 12px;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.rich-dropdown-label {
  border: 1px solid #d1d5db;
  background: #fff;
  
  /* Border radius with vendor prefixes */
  -webkit-border-radius: 6px;
  -moz-border-radius: 6px;
  border-radius: 6px;
  
  padding: 4px 6px;
  cursor: pointer;
  
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  
  -webkit-box-pack: justify;
  -moz-box-pack: justify;
  -ms-flex-pack: justify;
  -webkit-justify-content: space-between;
  justify-content: space-between;
  
  -webkit-box-align: center;
  -moz-box-align: center;
  -ms-flex-align: center;
  -webkit-align-items: center;
  align-items: center;
  
  min-height: 30px;
  max-height: 80px;
  
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  
  gap: 4px;
  overflow-y: auto;
  overflow-x: hidden;
}

/* Fallback for gap */
.rich-dropdown-label > * {
  margin-right: 4px;
  margin-bottom: 4px;
}
.rich-dropdown-label > *:last-child {
  margin-right: 0;
}

/* Scrollbar styling with vendor prefixes */
.rich-dropdown-label::-webkit-scrollbar {
  width: 6px;
}
.rich-dropdown-label::-webkit-scrollbar-thumb {
  background: #d1d5db;
  -webkit-border-radius: 3px;
  border-radius: 3px;
}

.label-text {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  
  gap: 4px;
  
  -webkit-box-align: center;
  -moz-box-align: center;
  -ms-flex-align: center;
  -webkit-align-items: center;
  align-items: center;
  
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  
  overflow: hidden;
}

/* Fallback for gap in label-text */
.label-text > * {
  margin-right: 4px;
  margin-bottom: 4px;
}
.label-text > *:last-child {
  margin-right: 0;
}

.dropdown-list {
  display: none;
  position: absolute;
  top: 100%;
  left: 0;
  width: 100%;
  background: #fff;
  border: 1px solid #d1d5db;
  
  -webkit-border-radius: 6px;
  -moz-border-radius: 6px;
  border-radius: 6px;
  
  z-index: 9999;
  max-height: 250px;
  overflow-y: auto;
  overflow-x: hidden;
  
  /* Box shadow with vendor prefixes */
  -webkit-box-shadow: 0 4px 6px rgba(0,0,0,0.1);
  -moz-box-shadow: 0 4px 6px rgba(0,0,0,0.1);
  box-shadow: 0 4px 6px rgba(0,0,0,0.1);
}

.dropdown-list::-webkit-scrollbar {
  width: 8px;
}
.dropdown-list::-webkit-scrollbar-thumb {
  background: #9ca3af;
  -webkit-border-radius: 4px;
  border-radius: 4px;
}

.rich-dropdown.open .dropdown-list {
  display: block;
}

.dropdown-list label {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  
  -webkit-box-align: center;
  -moz-box-align: center;
  -ms-flex-align: center;
  -webkit-align-items: center;
  align-items: center;
  
  padding: 6px 10px;
  cursor: pointer;
}

.dropdown-list label:hover {
  background: #f3f4f6;
}

.dropdown-actions {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  
  gap: 6px;
  padding: 6px;
  border-bottom: 1px solid #e5e7eb;
  background: #f9fafb;
}

/* Fallback for gap in dropdown-actions */
.dropdown-actions > * {
  margin-right: 6px;
}
.dropdown-actions > *:last-child {
  margin-right: 0;
}

.dropdown-actions button {
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  font-size: 11px;
  padding: 4px 8px;
}

/* ===================== CHIPS ===================== */
.dropdown-chip {
  display: -webkit-inline-box;
  display: -moz-inline-box;
  display: -ms-inline-flexbox;
  display: -webkit-inline-flex;
  display: inline-flex;
  
  -webkit-box-align: center;
  -moz-box-align: center;
  -ms-flex-align: center;
  -webkit-align-items: center;
  align-items: center;
  
  gap: 4px;
  background: #eef2ff;
  border: 1px solid #c7d2fe;
  padding: 2px 6px;
  
  -webkit-border-radius: 9999px;
  -moz-border-radius: 9999px;
  border-radius: 9999px;
  
  font-size: 10px;
  max-width: 120px;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/* Fallback for gap in chips */
.dropdown-chip > * {
  margin-right: 4px;
}
.dropdown-chip > *:last-child {
  margin-right: 0;
}

.dropdown-chip-remove {
  border: none;
  background: transparent;
  cursor: pointer;
  font-weight: bold;
  font-size: 12px;
  line-height: 1;
  color: #374151;
  
  -webkit-transition: transform 0.2s;
  -moz-transition: transform 0.2s;
  -o-transition: transform 0.2s;
  transition: transform 0.2s;
}

.dropdown-chip-remove:hover {
  color: #111827;
  -webkit-transform: scale(1.1);
  -moz-transform: scale(1.1);
  -ms-transform: scale(1.1);
  -o-transform: scale(1.1);
  transform: scale(1.1);
}

.dropdown-counter {
  font-size: 10px;
  color: #6b7280;
  margin-right: 6px;
  white-space: nowrap;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

/* ===================== CHIP INPUT ===================== */
.chip-input {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  
  -webkit-box-align: center;
  -moz-box-align: center;
  -ms-flex-align: center;
  -webkit-align-items: center;
  align-items: center;
  
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  
  gap: 6px;
  min-height: 32px;
  padding: 4px 8px;
  width: 380px;
  border: 1px solid #d1d5db;
  
  -webkit-border-radius: 8px;
  -moz-border-radius: 8px;
  border-radius: 8px;
  
  cursor: text;
  background: #fff;
}

/* Fallback for gap */
.chip-input > * {
  margin-right: 6px;
  margin-bottom: 6px;
}
.chip-input > *:last-child {
  margin-right: 0;
}

.chips-container {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  
  gap: 6px;
  max-height: 80px;
  overflow-y: auto;
}

/* Fallback for gap */
.chips-container > * {
  margin-right: 6px;
  margin-bottom: 6px;
}
.chips-container > *:last-child {
  margin-right: 0;
}

.chip {
  display: -webkit-inline-box;
  display: -moz-inline-box;
  display: -ms-inline-flexbox;
  display: -webkit-inline-flex;
  display: inline-flex;
  
  -webkit-box-align: center;
  -moz-box-align: center;
  -ms-flex-align: center;
  -webkit-align-items: center;
  align-items: center;
  
  gap: 6px;
  background: #eef2ff;
  border: 1px solid #c7d2fe;
  padding: 4px 8px;
  
  -webkit-border-radius: 9999px;
  -moz-border-radius: 9999px;
  border-radius: 9999px;
  
  font-size: 11px;
}

/* Fallback for gap in chip */
.chip > * {
  margin-right: 6px;
}
.chip > *:last-child {
  margin-right: 0;
}

.chip-remove {
  border: none;
  background: transparent;
  cursor: pointer;
  font-weight: bold;
  font-size: 13px;
  
  -webkit-transition: transform 0.2s;
  -moz-transition: transform 0.2s;
  -o-transition: transform 0.2s;
  transition: transform 0.2s;
}

.chip-remove:hover {
  color: #111827;
  -webkit-transform: scale(1.1);
  -moz-transform: scale(1.1);
  -ms-transform: scale(1.1);
  -o-transform: scale(1.1);
  transform: scale(1.1);
}

.chip-counter {
  font-size: 10px;
  color: #6b7280;
  margin-right: 4px;
}

.chip-editor-input {
  border: none;
  outline: none;
  min-width: 80px;
  font-size: 11px;
  padding: 4px;
  
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

/* ===================== CUSTOM NOTIFICATION POPUP ===================== */
.notif-popup {
  position: absolute;
  z-index: 99999;
  width: 380px;
  background: #fff;
  border: 1px solid #d1d5db;
  
  -webkit-border-radius: 8px;
  -moz-border-radius: 8px;
  border-radius: 8px;
  
  -webkit-box-shadow: 0 6px 18px rgba(0,0,0,.15);
  -moz-box-shadow: 0 6px 18px rgba(0,0,0,.15);
  box-shadow: 0 6px 18px rgba(0,0,0,.15);
  
  max-height: 250px;
  overflow-y: auto;
  display: none;
}

.notif-popup::-webkit-scrollbar {
  width: 8px;
}
.notif-popup::-webkit-scrollbar-thumb {
  background: #9ca3af;
  -webkit-border-radius: 4px;
  border-radius: 4px;
}

.notif-row {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  
  -webkit-box-align: center;
  -moz-box-align: center;
  -ms-flex-align: center;
  -webkit-align-items: center;
  align-items: center;
  
  padding: 6px 10px;
  cursor: pointer;
}

.notif-row:hover {
  background: #f3f4f6;
}

/* ===================== BUTTONS ===================== */
button {
  font-size: 12px;
  background: #3b82f6;
  color: white;
  border: none;
  padding: 6px 12px;
  
  -webkit-border-radius: 6px;
  -moz-border-radius: 6px;
  border-radius: 6px;
  
  cursor: pointer;
  
  -webkit-transition: background 0.2s;
  -moz-transition: background 0.2s;
  -o-transition: background 0.2s;
  transition: background 0.2s;
}

button:hover {
  background: #2563eb;
}

button:disabled {
  background: #93c5fd;
  cursor: not-allowed;
}

/* IE10+ specific fixes */
@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
  .field-row {
    display: -ms-flexbox;
  }
  .rich-dropdown-label {
    display: -ms-flexbox;
  }
  .chip-input {
    display: -ms-flexbox;
  }
}
</style>

<script type="text/javascript" src="#{facesContext.externalContext.requestContextPath}/resources/js/dropdown.js"></script>
</ui:define>

<ui:define name="content">
<h:form id="formId">
  <div class="form-section">

    <div class="field-row">
      <!-- ================= EVENT CODES ================= -->
      <div class="field-col">
        <span class="field-label">Event Codes:</span>
        <div class="rich-dropdown" data-dropdown-id="eventCodes">
          <div class="rich-dropdown-label">
            <span class="dropdown-counter" id="eventCodesCounter">0/30</span>
            <span class="label-text" data-default="Select Event Codes">Select Event Codes</span>
            <span>▼</span>
          </div>
          <div class="dropdown-list">
            <div class="dropdown-actions">
              <button type="button" onclick="selectAll(this, true)">Select All</button>
              <button type="button" onclick="selectAll(this, false)">Clear All</button>
            </div>
            <ui:repeat value="#{selfServiceSettingsBBean.eventCodesList}" var="code">
              <label title="#{selfServiceSettingsBBean.eventCodeTooltips[code]}">
                <h:selectBooleanCheckbox value="#{selfServiceSettingsBBean.selectedEventCodesMap[code]}" data-label="#{code}" />
                <h:outputText value="#{code}" style="margin-left:5px;" />
              </label>
            </ui:repeat>
          </div>
        </div>
      </div>

      <!-- ================= PICKUP TYPE ================= -->
      <div class="field-col">
        <span class="field-label">Pickup Type:</span>
        <div class="rich-dropdown" data-dropdown-id="pickupType">
          <div class="rich-dropdown-label">
            <span class="dropdown-counter" id="pickupTypeCounter">0/30</span>
            <span class="label-text" data-default="Select Pickup Type">Select Pickup Type</span>
            <span>▼</span>
          </div>
          <div class="dropdown-list">
            <div class="dropdown-actions">
              <button type="button" onclick="selectAll(this, true)">Select All</button>
              <button type="button" onclick="selectAll(this, false)">Clear All</button>
            </div>
            <ui:repeat value="#{selfServiceSettingsBBean.pickupTypeList}" var="type">
              <label>
                <h:selectBooleanCheckbox value="#{selfServiceSettingsBBean.selectedPickupTypeMap[type]}" data-label="#{type}" />
                <h:outputText value="#{type}" style="margin-left:5px;" />
              </label>
            </ui:repeat>
          </div>
        </div>
      </div>

      <!-- ================= NOTIFICATION MESSAGES ================= -->
      <div class="field-col">
        <div class="field-label">Notification Messages:</div>
        <h:panelGroup id="chipInputWrapper" layout="block" styleClass="chip-input" onclick="getChipEditor().focus()">
          <span id="chipCounter" class="chip-counter"></span>
          <span id="chipsContainer" class="chips-container">
            <ui:repeat value="#{selfServiceSettingsBBean.selectedNotificationList}" var="msg">
              <span class="chip" data-label="#{msg}">
                <span class="chip-text" title="#{msg}">#{msg}</span>
                <button type="button" class="chip-remove">×</button>
              </span>
            </ui:repeat>
          </span>
          <!-- Input field for typing/searching -->
          <h:inputText id="chipInput"
                       styleClass="chip-editor-input"
                       autocomplete="off"
                       onkeyup="handleChipTyping(event)"
                       onkeydown="handleChipBackspace(event)"
                       onfocus="openCustomNotifPopup()" />
        </h:panelGroup>

        <!-- Ajax call with proper data passing -->
        <a4j:jsFunction name="fetchNotifSuggestions"
                        action="#{selfServiceSettingsBBean.fetchNotificationSuggestions}"
                        oncomplete="onFetchNotifSuggestionsComplete(event, '#{selfServiceSettingsBBean.notificationSuggestionsJson}')"
                        execute="@this"
                        limitToList="true"
                        bypassUpdates="true"
                        immediate="true">
            <a4j:actionparam name="query" 
                             assignTo="#{selfServiceSettingsBBean.chipQuery}"
                             noEscape="false" />
        </a4j:jsFunction>
        
        <!-- Popup container -->
        <div id="notifPopup" class="notif-popup">
          <div class="dropdown-actions">
            <button type="button" onclick="selectAllNotifications(event)">Select All</button>
            <button type="button" onclick="clearAllNotifications(event)">Clear All</button>
          </div>
          <div id="notifList"></div>
        </div>
      </div>
    </div>

    <h:inputHidden id="selectedEventCodes" value="#{selfServiceSettingsBBean.selectedEventCodesString}" />
    <h:inputHidden id="selectedPickupTypes" value="#{selfServiceSettingsBBean.selectedPickupTypesString}" />

    <a4j:jsFunction name="rfToggleNotif"
                    action="#{selfServiceSettingsBBean.toggleNotification}"
                    limitToList="true">
      <a4j:actionparam name="label" assignTo="#{selfServiceSettingsBBean.toggleLabel}" />
      <a4j:actionparam name="checked" assignTo="#{selfServiceSettingsBBean.toggleChecked}" />
    </a4j:jsFunction>

    <div class="field-row" style="margin-top:15px;">
      <h:commandButton value="Show Selected Values"
                       action="#{selfServiceSettingsBBean.printSelections}"
                       onclick="prepareFormSubmit();"
                       style="padding:4px 8px; font-size:11px;" />
    </div>

    <h:panelGroup rendered="#{not empty selfServiceSettingsBBean.selectedSummary}">
      <h:outputText value="#{selfServiceSettingsBBean.selectedSummary}" escape="false" />
    </h:panelGroup>
  </div>
</h:form>
</ui:define>
</ui:composition>









/* ===========================================================
   dropdown.js — BROWSER COMPATIBLE VERSION
   Compatible with: IE11+, Edge, Chrome, Firefox, Safari
=========================================================== */

/* ==================== POLYFILLS ==================== */

// Array.from polyfill for IE11
if (!Array.from) {
  Array.from = function(arrayLike) {
    var arr = [];
    for (var i = 0; i < arrayLike.length; i++) {
      arr.push(arrayLike[i]);
    }
    return arr;
  };
}

// Element.closest polyfill for IE11
if (!Element.prototype.closest) {
  Element.prototype.closest = function(selector) {
    var el = this;
    while (el) {
      if (el.matches && el.matches(selector)) return el;
      if (el.msMatchesSelector && el.msMatchesSelector(selector)) return el;
      el = el.parentElement;
    }
    return null;
  };
}

// Element.matches polyfill for IE11
if (!Element.prototype.matches) {
  Element.prototype.matches = Element.prototype.msMatchesSelector ||
                              Element.prototype.webkitMatchesSelector;
}

// Element.remove polyfill for IE11
if (!Element.prototype.remove) {
  Element.prototype.remove = function() {
    if (this.parentNode) {
      this.parentNode.removeChild(this);
    }
  };
}

// String.trim polyfill for very old browsers
if (typeof String.prototype.trim !== 'function') {
  String.prototype.trim = function() {
    return this.replace(/^\s+|\s+$/g, '');
  };
}

// Object.assign polyfill for IE11
if (typeof Object.assign !== 'function') {
  Object.assign = function(target) {
    'use strict';
    if (target === null || target === undefined) {
      throw new TypeError('Cannot convert undefined or null to object');
    }
    var to = Object(target);
    for (var index = 1; index < arguments.length; index++) {
      var nextSource = arguments[index];
      if (nextSource !== null && nextSource !== undefined) {
        for (var nextKey in nextSource) {
          if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
            to[nextKey] = nextSource[nextKey];
          }
        }
      }
    }
    return to;
  };
}

/* ==================== CONSTANTS ==================== */
var MAX_CHIPS = 20;
var ABSOLUTE_MAX_CHIPS = 50;
var COLLAPSE_THRESHOLD = 10;

/* ==================== HELPER FUNCTIONS ==================== */
function byId(id) {
  return document.getElementById(id);
}

function qSel(sel) {
  return document.querySelector(sel);
}

function qAll(sel) {
  return Array.from(document.querySelectorAll(sel));
}

/* ===========================================================
   EVENT & PICKUP DROPDOWNS
=========================================================== */
function initializeCustomDropdowns() {
  var dropdowns = qAll(".rich-dropdown");
  
  for (var i = 0; i < dropdowns.length; i++) {
    (function(dropdown) {
      var label = dropdown.querySelector(".rich-dropdown-label");
      var labelText = dropdown.querySelector(".label-text");
      var checkboxes = dropdown.querySelectorAll(".dropdown-list input[type='checkbox']");

      if (!label || label._bound) return;
      label._bound = true;

      // Toggle dropdown open/close
      label.addEventListener("click", function(e) {
        e.stopPropagation();
        for (var j = 0; j < dropdowns.length; j++) {
          if (dropdowns[j] !== dropdown) {
            dropdowns[j].classList.remove("open");
          }
        }
        dropdown.classList.toggle("open");
      });

      // Update label chips when selection changes
      for (var k = 0; k < checkboxes.length; k++) {
        checkboxes[k].addEventListener("change", function() {
          updateDropdownChips(dropdown, checkboxes, labelText);
        });
      }

      updateDropdownChips(dropdown, checkboxes, labelText);
    })(dropdowns[i]);
  }

  // Close dropdowns when clicking outside
  document.addEventListener("click", function(e) {
    var clickedDropdown = false;
    var target = e.target;
    while (target) {
      if (target.classList && target.classList.contains('rich-dropdown')) {
        clickedDropdown = true;
        break;
      }
      target = target.parentElement;
    }
    
    if (!clickedDropdown) {
      for (var i = 0; i < dropdowns.length; i++) {
        dropdowns[i].classList.remove("open");
      }
    }
  });
}

/* Render selected chips inside dropdown label */
function updateDropdownChips(dropdown, checkboxes, labelText) {
  var selected = [];
  var checkboxArray = Array.from(checkboxes);
  
  for (var i = 0; i < checkboxArray.length; i++) {
    if (checkboxArray[i].checked) {
      var label = checkboxArray[i].dataset.label || 
                  (checkboxArray[i].nextElementSibling ? 
                   checkboxArray[i].nextElementSibling.textContent.trim() : '');
      if (label) selected.push(label);
    }
  }

  // Update counter in "selected/total" format
  var dropdownId = dropdown.getAttribute('data-dropdown-id');
  if (dropdownId) {
    var counter = byId(dropdownId + 'Counter');
    if (counter) {
      var totalCount = checkboxes.length;
      var selectedCount = selected.length;
      counter.textContent = selectedCount + '/' + totalCount;
    }
  }

  if (selected.length === 0) {
    labelText.innerHTML = labelText.dataset.default || labelText.getAttribute('data-default');
    return;
  }

  var visibleCount = Math.min(selected.length, COLLAPSE_THRESHOLD);
  var html = "";

  for (var i = 0; i < visibleCount; i++) {
    var escapedLabel = escapeHtml(selected[i]);
    html += '<span class="dropdown-chip" data-label="' + escapedLabel + '">' +
            escapedLabel +
            '<button type="button" class="dropdown-chip-remove" onclick="removeDropdownChip(this, event)">×</button>' +
            '</span>';
  }

  if (selected.length > COLLAPSE_THRESHOLD) {
    var remaining = selected.length - COLLAPSE_THRESHOLD;
    html += '<span class="dropdown-chip dropdown-chip-more" onclick="expandDropdownChips(this, event)">+' + 
            remaining + ' more</span>';
  }

  labelText.innerHTML = html;
}

/* Remove a chip by clicking × inside label */
function removeDropdownChip(button, event) {
  event.stopPropagation();
  var chip = button.closest(".dropdown-chip");
  if (!chip) return;
  
  var label = chip.getAttribute('data-label');
  var dropdown = chip.closest(".rich-dropdown");
  if (!dropdown) return;
  
  var checkboxes = dropdown.querySelectorAll(".dropdown-list input[type='checkbox']");
  var checkboxArray = Array.from(checkboxes);
  
  for (var i = 0; i < checkboxArray.length; i++) {
    var cb = checkboxArray[i];
    var lbl = cb.dataset.label || 
              (cb.nextElementSibling ? cb.nextElementSibling.textContent.trim() : '');
    if (lbl === label) {
      cb.checked = false;
      var evt = document.createEvent('HTMLEvents');
      evt.initEvent('change', true, true);
      cb.dispatchEvent(evt);
      break;
    }
  }
}

/* Expand collapsed chips (+N more) */
function expandDropdownChips(button, event) {
  event.stopPropagation();
  var dropdown = button.closest(".rich-dropdown");
  if (!dropdown) return;
  
  var labelText = dropdown.querySelector(".label-text");
  var checkboxes = dropdown.querySelectorAll(".dropdown-list input[type='checkbox']");
  var checkboxArray = Array.from(checkboxes);
  var selected = [];
  
  for (var i = 0; i < checkboxArray.length; i++) {
    if (checkboxArray[i].checked) {
      var label = checkboxArray[i].dataset.label || 
                  (checkboxArray[i].nextElementSibling ? 
                   checkboxArray[i].nextElementSibling.textContent.trim() : '');
      if (label) selected.push(label);
    }
  }
  
  var html = '';
  for (var i = 0; i < selected.length; i++) {
    var escapedLabel = escapeHtml(selected[i]);
    html += '<span class="dropdown-chip" data-label="' + escapedLabel + '">' +
            escapedLabel +
            '<button type="button" class="dropdown-chip-remove" onclick="removeDropdownChip(this, event)">×</button>' +
            '</span>';
  }
  
  labelText.innerHTML = html;
}

/* Select/Clear all inside a dropdown */
function selectAll(button, flag) {
  var dropdown = button.closest(".rich-dropdown");
  if (!dropdown) return;
  
  var checkboxes = dropdown.querySelectorAll(".dropdown-list input[type='checkbox']");
  var labelText = dropdown.querySelector(".label-text");
  var checkboxArray = Array.from(checkboxes);
  
  for (var i = 0; i < checkboxArray.length; i++) {
    checkboxArray[i].checked = flag;
    var evt = document.createEvent('HTMLEvents');
    evt.initEvent('change', true, true);
    checkboxArray[i].dispatchEvent(evt);
  }
  
  updateDropdownChips(dropdown, checkboxes, labelText);
}

/* ===========================================================
   FORM SUBMISSION
=========================================================== */
function prepareFormSubmit() {
  var eventDropdown = qSel("[data-dropdown-id='eventCodes']");
  var pickupDropdown = qSel("[data-dropdown-id='pickupType']");
  
  if (!eventDropdown || !pickupDropdown) {
    console.error('[ERROR] Could not find dropdowns for form submission');
    return true;
  }
  
  var eventCheckboxes = Array.from(
    eventDropdown.querySelectorAll(".dropdown-list input[type='checkbox']:checked")
  );
  var eventValues = [];
  for (var i = 0; i < eventCheckboxes.length; i++) {
    var val = eventCheckboxes[i].dataset.label || 
              (eventCheckboxes[i].nextElementSibling ? 
               eventCheckboxes[i].nextElementSibling.textContent.trim() : '');
    if (val) eventValues.push(val);
  }
  
  var pickupCheckboxes = Array.from(
    pickupDropdown.querySelectorAll(".dropdown-list input[type='checkbox']:checked")
  );
  var pickupValues = [];
  for (var i = 0; i < pickupCheckboxes.length; i++) {
    var val = pickupCheckboxes[i].dataset.label || 
              (pickupCheckboxes[i].nextElementSibling ? 
               pickupCheckboxes[i].nextElementSibling.textContent.trim() : '');
    if (val) pickupValues.push(val);
  }

  console.log('[DEBUG] Event values:', eventValues);
  console.log('[DEBUG] Pickup values:', pickupValues);

  byId("formId:selectedEventCodes").value = eventValues.join(",");
  byId("formId:selectedPickupTypes").value = pickupValues.join(",");
  
  return true;
}

/* ===========================================================
   NOTIFICATION POPUP + CHIPS
=========================================================== */

// Track if RichFaces is ready
var richFacesReady = false;
var initializationAttempts = 0;
var MAX_INIT_ATTEMPTS = 50; // 5 seconds total

function checkRichFacesReady() {
  if (typeof fetchNotifSuggestions === 'function') {
    richFacesReady = true;
    console.log('[INFO] RichFaces Ajax functions ready');
    return true;
  }
  
  initializationAttempts++;
  if (initializationAttempts < MAX_INIT_ATTEMPTS) {
    setTimeout(checkRichFacesReady, 100);
  } else {
    console.error('[ERROR] RichFaces Ajax functions not available after 5 seconds');
  }
  return false;
}

function getChipEditor() {
  return byId("formId:chipInput");
}

function getChipsContainer() {
  return byId("chipsContainer");
}

function getNotifPopup() {
  return byId("notifPopup");
}

/* Position notification popup below the chip input field */
function positionNotifPopup() {
  var popup = getNotifPopup();
  var chipInput = byId('formId:chipInputWrapper');
  
  if (popup && chipInput) {
    var rect = chipInput.getBoundingClientRect();
    var parentRect = chipInput.parentElement.getBoundingClientRect();
    
    popup.style.top = (rect.bottom - parentRect.top + 4) + 'px';
    popup.style.left = (rect.left - parentRect.left) + 'px';
  }
}

function openCustomNotifPopup() {
  var popup = getNotifPopup();
  
  if (popup) {
    positionNotifPopup();
    popup.style.display = 'block';
  }
}

/* Close popup if clicked outside */
document.addEventListener("mousedown", function(e) {
  var popup = getNotifPopup();
  var input = getChipEditor();
  if (!popup || !input) return;
  
  var clickedPopup = popup.contains(e.target);
  var clickedInput = input.contains(e.target);
  
  if (!clickedPopup && !clickedInput) {
    popup.style.display = "none";
  }
});

/* Handle typing (live Ajax search) */
var notifTimer = null;
var lastQuery = null;

function handleChipTyping(event) {
  var q = event.target.value || '';
  
  console.log('[DEBUG] handleChipTyping called, query:', q);
  
  clearTimeout(notifTimer);
  
  notifTimer = setTimeout(function() {
    // Skip if query hasn't changed
    if (q === lastQuery) {
      console.log('[DEBUG] Query unchanged, skipping Ajax call');
      return;
    }
    
    lastQuery = q;
    
    if (!richFacesReady) {
      console.warn('[WARN] RichFaces not ready, checking again...');
      if (!checkRichFacesReady()) {
        console.error('[ERROR] Cannot call fetchNotifSuggestions - function not available');
        return;
      }
    }
    
    try {
      console.log('[DEBUG] Calling fetchNotifSuggestions with query:', q);
      fetchNotifSuggestions(q);
    } catch (err) {
      console.error('[ERROR] fetchNotifSuggestions() call failed:', err);
      // Retry initialization
      richFacesReady = false;
      checkRichFacesReady();
    }
  }, 200);
}

/* Handle backspace to remove chips */
function handleChipBackspace(event) {
  var input = event.target;
  
  if (event.key === 'Backspace' && input.value === '') {
    var chips = qAll('.chip[data-label]');
    if (chips.length > 0) {
      var lastChip = chips[chips.length - 1];
      var label = lastChip.getAttribute('data-label');
      removeChip(label);
      event.preventDefault();
    }
  }
}

/* Callback with better error handling */
function onFetchNotifSuggestionsComplete(event, jsonData) {
  console.log('[DEBUG] onFetchNotifSuggestionsComplete called');
  console.log('[DEBUG] Raw jsonData:', jsonData);
  
  var results = [];
  
  try {
    if (!jsonData || jsonData === 'null' || jsonData === 'undefined') {
      console.warn('[WARN] jsonData is empty or null');
      results = [];
    } else if (typeof jsonData === 'string') {
      var cleanJson = jsonData.trim();
      if (cleanJson.charAt(0) === '[' && cleanJson.charAt(cleanJson.length - 1) === ']') {
        results = JSON.parse(cleanJson);
        console.log('[DEBUG] Successfully parsed JSON, results count:', results.length);
      } else {
        console.error('[ERROR] jsonData does not look like valid JSON array');
        console.error('[ERROR] jsonData was:', cleanJson);
      }
    } else if (Array.isArray(jsonData)) {
      results = jsonData;
      console.log('[DEBUG] jsonData is already an array');
    }
  } catch (e) {
    console.error('[ERROR] Failed to parse JSON:', e);
    console.error('[ERROR] jsonData was:', jsonData);
    results = [];
  }
  
  renderNotifSuggestions(results);
}

/* Display suggestions - with HTML escaping for special characters */
function renderNotifSuggestions(results) {
  console.log('[DEBUG] renderNotifSuggestions called with', results.length, 'results');
  
  var popup = getNotifPopup();
  var list = byId("notifList");
  if (!popup || !list) {
    console.error('[ERROR] Popup or list element not found');
    return;
  }
  
  list.innerHTML = "";

  if (!results.length) {
    list.innerHTML = '<div style="padding:8px;color:#6b7280;">No results found</div>';
  } else {
    for (var i = 0; i < results.length; i++) {
      (function(msg) {
        var row = document.createElement("div");
        row.className = "notif-row";
        
        var cb = document.createElement("input");
        cb.type = "checkbox";
        cb.className = "notification-checkbox";
        cb.checked = !!qSel('.chip[data-label="' + escapeSelector(msg) + '"]');
        
        cb.addEventListener("change", function() {
          if (cb.checked) {
            addChip(msg);
          } else {
            removeChip(msg);
          }
        });
        
        var label = document.createElement("span");
        label.textContent = msg;
        label.style.marginLeft = "8px";
        
        row.appendChild(cb);
        row.appendChild(label);
        list.appendChild(row);
      })(results[i]);
    }
  }

  positionNotifPopup();
  popup.style.display = "block";
  
  console.log('[DEBUG] Popup displayed with', results.length, 'suggestions');
}

/* Helper to escape special characters in CSS selectors */
function escapeSelector(str) {
  return str.replace(/[!"#$%&'()*+,.\/:;<=>?@[\\\]^`{|}~]/g, '\\$&');
}

/* Helper to escape HTML special characters */
function escapeHtml(str) {
  var div = document.createElement('div');
  div.textContent = str;
  return div.innerHTML;
}

/* Chips handling - with proper HTML escaping */
function addChip(label) {
  if (!label || chipExists(label)) return;
  
  var chipsContainer = getChipsContainer();
  var chip = document.createElement("span");
  chip.className = "chip";
  chip.setAttribute('data-label', label);
  
  var textSpan = document.createElement("span");
  textSpan.className = "chip-text";
  textSpan.textContent = label;
  
  var removeBtn = document.createElement("button");
  removeBtn.type = "button";
  removeBtn.className = "chip-remove";
  removeBtn.textContent = "×";
  removeBtn.addEventListener("click", function() {
    removeChip(label);
  });
  
  chip.appendChild(textSpan);
  chip.appendChild(removeBtn);
  chipsContainer.appendChild(chip);
  
  if (window.rfToggleNotif) {
    rfToggleNotif(label, true);
  }
  updateChipCounter();
  
  var popup = getNotifPopup();
  if (popup && popup.style.display === 'block') {
    setTimeout(function() {
      positionNotifPopup();
    }, 10);
  }
}

function removeChip(label) {
  var chip = qSel('.chip[data-label="' + escapeSelector(label) + '"]');
  if (chip) {
    chip.remove();
  }
  
  if (window.rfToggleNotif) {
    rfToggleNotif(label, false);
  }
  updateChipCounter();
  
  var popup = getNotifPopup();
  if (popup && popup.style.display === 'block') {
    setTimeout(function() {
      positionNotifPopup();
    }, 10);
  }
}

function chipExists(label) {
  return !!qSel('.chip[data-label="' + escapeSelector(label) + '"]');
}

function updateChipCounter() {
  var counter = byId("chipCounter");
  var chipCount = qAll(".chip[data-label]").length;
  if (counter) {
    counter.textContent = chipCount + '/' + ABSOLUTE_MAX_CHIPS;
  }
}

/* Select All / Clear All in popup */
function selectAllNotifications(event) {
  event.stopPropagation();
  var checkboxes = qAll("#notifList input[type='checkbox']");
  for (var i = 0; i < checkboxes.length; i++) {
    var cb = checkboxes[i];
    cb.checked = true;
    var label = cb.nextSibling ? cb.nextSibling.textContent.trim() : '';
    if (label) addChip(label);
  }
  setTimeout(function() {
    positionNotifPopup();
  }, 50);
}

function clearAllNotifications(event) {
  event.stopPropagation();
  var checkboxes = qAll("#notifList input[type='checkbox']");
  for (var i = 0; i < checkboxes.length; i++) {
    var cb = checkboxes[i];
    cb.checked = false;
    var label = cb.nextSibling ? cb.nextSibling.textContent.trim() : '';
    if (label) removeChip(label);
  }
  setTimeout(function() {
    positionNotifPopup();
  }, 50);
}

/* Initialize everything - using cross-browser event handlers */
function initializeAll() {
  initializeCustomDropdowns();
  updateChipCounter();
  
  var dropdowns = qAll('.rich-dropdown[data-dropdown-id]');
  for (var i = 0; i < dropdowns.length; i++) {
    var dropdown = dropdowns[i];
    var checkboxes = dropdown.querySelectorAll('.dropdown-list input[type="checkbox"]');
    var labelText = dropdown.querySelector('.label-text');
    updateDropdownChips(dropdown, checkboxes, labelText);
  }
  
  console.log('[INFO] Starting RichFaces readiness check...');
  checkRichFacesReady();
  
  console.log('[INFO] dropdown.js initialized');
}

// Cross-browser window load event
if (window.addEventListener) {
  window.addEventListener("load", initializeAll, false);
} else if (window.attachEvent) {
  window.attachEvent("onload", initializeAll);
} else {
  window.onload = initializeAll;
}

/* Reposition notification popup on window resize if it's visible */
function handleResize() {
  var popup = getNotifPopup();
  if (popup && popup.style.display === 'block') {
    positionNotifPopup();
  }
}

if (window.addEventListener) {
  window.addEventListener("resize", handleResize, false);
} else if (window.attachEvent) {
  window.attachEvent("onresize", handleResize);
} else {
  window.onresize = handleResize;
}